{"ast":null,"code":"export default {\n  name: \"Notice\",\n  // 组件名称\n\n  data() {\n    return {\n      // 公告列表数据\n      tableData: [],\n      // 当前页码\n      pageNum: 1,\n      // 每页显示数量\n      pageSize: 10,\n      // 总记录数\n      total: 0,\n      // 查询标题\n      title: null,\n      // 新增/编辑弹窗可见性\n      fromVisible: false,\n      // 新增/编辑表单数据\n      form: {},\n      // 当前用户信息\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      // 表单验证规则\n      rules: {\n        title: [{\n          required: true,\n          message: '请输入标题',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '请输入内容',\n          trigger: 'blur'\n        }]\n      },\n      // 选中的公告ID列表（用于批量删除）\n      ids: []\n    };\n  },\n  created() {\n    // 组件创建时加载第一页数据\n    this.load(1);\n  },\n  methods: {\n    // 打开新增弹窗\n    handleAdd() {\n      this.form = {}; // 清空表单数据\n      this.fromVisible = true; // 打开弹窗\n    },\n\n    // 打开编辑弹窗\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row)); // 深拷贝选中行数据到表单\n      this.fromVisible = true; // 打开弹窗\n    },\n\n    // 提交表单（新增或更新公告）\n    save() {\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          const url = this.form.id ? '/notice/update' : '/notice/add';\n          const method = this.form.id ? 'PUT' : 'POST';\n          this.$request({\n            url,\n            method,\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              this.$message.success('保存成功');\n              this.load(1); // 保存成功后刷新数据\n              this.fromVisible = false; // 关闭弹窗\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        }\n      });\n    },\n    // 删除单条公告\n    del(id) {\n      this.$confirm('您确定删除吗？', '确认删除', {\n        type: \"warning\"\n      }).then(() => {\n        this.$request.delete(`/notice/delete/${id}`).then(res => {\n          if (res.code === '200') {\n            this.$message.success('操作成功');\n            this.load(1); // 删除成功后刷新数据\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      }).catch(() => {});\n    },\n    // 监听表格选中项变化，更新ids数组\n    handleSelectionChange(rows) {\n      this.ids = rows.map(v => v.id);\n    },\n    // 批量删除公告\n    delBatch() {\n      if (!this.ids.length) {\n        this.$message.warning('请选择数据');\n        return;\n      }\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {\n        type: \"warning\"\n      }).then(() => {\n        this.$request.delete('/notice/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            this.$message.success('操作成功');\n            this.load(1); // 批量删除成功后刷新数据\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      }).catch(() => {});\n    },\n    // 分页查询公告数据\n    load(pageNum) {\n      if (pageNum) {\n        this.pageNum = pageNum;\n      }\n      const params = {\n        pageNum: this.pageNum,\n        pageSize: this.pageSize,\n        title: this.title\n      };\n      this.$request.get('/notice/selectPage', {\n        params\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    // 重置查询条件并重新加载数据\n    reset() {\n      this.title = null;\n      this.load(1);\n    },\n    // 分页器页码变化时触发的方法\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","title","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","content","ids","created","load","methods","handleAdd","handleEdit","row","stringify","save","$refs","formRef","validate","valid","url","id","method","$request","then","res","code","$message","success","error","msg","del","$confirm","type","delete","catch","handleSelectionChange","rows","map","v","delBatch","length","warning","params","get","list","reset","handleCurrentChange"],"sources":["src/views/manager/Notice.vue"],"sourcesContent":["<template>\r\n  <!-- 页面主体容器 -->\r\n  <div>\r\n\r\n    <!-- 查询区域 -->\r\n    <div class=\"search\">\r\n      <!-- 输入框，用于输入标题进行查询 -->\r\n      <el-input v-model=\"title\" placeholder=\"请输入标题查询\" style=\"width: 200px\"></el-input>\r\n      <!-- 查询按钮，点击后执行查询操作 -->\r\n      <el-button plain style=\"margin-left: 10px\" type=\"info\" @click=\"load(1)\">查询</el-button>\r\n      <!-- 重置按钮，点击后清除查询条件并重新加载数据 -->\r\n      <el-button plain style=\"margin-left: 10px\" type=\"warning\" @click=\"reset\">重置</el-button>\r\n    </div>\r\n\r\n    <!-- 操作区域 -->\r\n    <div class=\"operation\">\r\n      <!-- 新增按钮，点击后打开新增弹窗 -->\r\n      <el-button plain type=\"primary\" @click=\"handleAdd\">新增</el-button>\r\n      <!-- 批量删除按钮，点击后执行批量删除操作 -->\r\n      <el-button plain type=\"danger\" @click=\"delBatch\">批量删除</el-button>\r\n    </div>\r\n\r\n    <!-- 数据表格区域 -->\r\n    <div class=\"table\">\r\n      <!-- 数据表格组件，展示公告列表 -->\r\n      <el-table :data=\"tableData\" stripe @selection-change=\"handleSelectionChange\">\r\n        <!-- 复选框列 -->\r\n        <el-table-column align=\"center\" type=\"selection\" width=\"55\"></el-table-column>\r\n        <!-- 序号列 -->\r\n        <el-table-column align=\"center\" label=\"序号\" prop=\"id\" sortable\r\n                         width=\"80\"></el-table-column>\r\n        <!-- 标题列 -->\r\n        <el-table-column label=\"标题\" prop=\"title\" show-overflow-tooltip></el-table-column>\r\n        <!-- 内容列 -->\r\n        <el-table-column label=\"内容\" prop=\"content\" show-overflow-tooltip></el-table-column>\r\n        <!-- 创建时间列 -->\r\n        <el-table-column label=\"创建时间\" prop=\"time\"></el-table-column>\r\n        <!-- 创建人列 -->\r\n        <el-table-column label=\"创建人\" prop=\"user\"></el-table-column>\r\n\r\n        <!-- 操作列，包含编辑和删除按钮 -->\r\n        <el-table-column align=\"center\" label=\"操作\" width=\"180\">\r\n          <template v-slot=\"scope\">\r\n            <!-- 编辑按钮，点击后打开编辑弹窗 -->\r\n            <el-button plain size=\"mini\" type=\"primary\" @click=\"handleEdit(scope.row)\">编辑\r\n            </el-button>\r\n            <!-- 删除按钮，点击后执行单条数据删除操作 -->\r\n            <el-button plain size=\"mini\" type=\"danger\" @click=del(scope.row.id)>删除</el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- 分页器 -->\r\n      <div class=\"pagination\">\r\n        <el-pagination\r\n            :current-page=\"pageNum\"\r\n            :page-size=\"pageSize\"\r\n            :page-sizes=\"[5, 10, 20]\"\r\n            :total=\"total\"\r\n            background\r\n            layout=\"total, prev, pager, next\"\r\n            @current-change=\"handleCurrentChange\">\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 新增/编辑弹窗 -->\r\n    <el-dialog :close-on-click-modal=\"false\" :visible.sync=\"fromVisible\" destroy-on-close\r\n               title=\"信息\"\r\n               width=\"40%\">\r\n      <!-- 表单组件，用于新增或编辑公告信息 -->\r\n      <el-form ref=\"formRef\" :model=\"form\" :rules=\"rules\" label-width=\"100px\"\r\n               style=\"padding-right: 50px\">\r\n        <!-- 标题输入项 -->\r\n        <el-form-item label=\"标题\" prop=\"title\">\r\n          <el-input v-model=\"form.title\" autocomplete=\"off\"></el-input>\r\n        </el-form-item>\r\n        <!-- 内容输入项（文本域） -->\r\n        <el-form-item label=\"内容\" prop=\"content\">\r\n          <el-input v-model=\"form.content\" :rows=\"5\" autocomplete=\"off\" type=\"textarea\"></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n      <!-- 弹窗底部操作区 -->\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <!-- 取消按钮，关闭弹窗 -->\r\n        <el-button @click=\"fromVisible = false\">取 消</el-button>\r\n        <!-- 确定按钮，提交表单并关闭弹窗 -->\r\n        <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Notice\", // 组件名称\r\n\r\n  data() {\r\n    return {\r\n      // 公告列表数据\r\n      tableData: [],\r\n      // 当前页码\r\n      pageNum: 1,\r\n      // 每页显示数量\r\n      pageSize: 10,\r\n      // 总记录数\r\n      total: 0,\r\n      // 查询标题\r\n      title: null,\r\n      // 新增/编辑弹窗可见性\r\n      fromVisible: false,\r\n      // 新增/编辑表单数据\r\n      form: {},\r\n      // 当前用户信息\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      // 表单验证规则\r\n      rules: {\r\n        title: [\r\n          {required: true, message: '请输入标题', trigger: 'blur'},\r\n        ],\r\n        content: [\r\n          {required: true, message: '请输入内容', trigger: 'blur'},\r\n        ]\r\n      },\r\n      // 选中的公告ID列表（用于批量删除）\r\n      ids: []\r\n    }\r\n  },\r\n\r\n  created() {\r\n    // 组件创建时加载第一页数据\r\n    this.load(1)\r\n  },\r\n\r\n  methods: {\r\n    // 打开新增弹窗\r\n    handleAdd() {\r\n      this.form = {}  // 清空表单数据\r\n      this.fromVisible = true   // 打开弹窗\r\n    },\r\n\r\n    // 打开编辑弹窗\r\n    handleEdit(row) {\r\n      this.form = JSON.parse(JSON.stringify(row))  // 深拷贝选中行数据到表单\r\n      this.fromVisible = true   // 打开弹窗\r\n    },\r\n\r\n    // 提交表单（新增或更新公告）\r\n    save() {\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          const url = this.form.id ? '/notice/update' : '/notice/add'\r\n          const method = this.form.id ? 'PUT' : 'POST'\r\n\r\n          this.$request({url, method, data: this.form}).then(res => {\r\n            if (res.code === '200') {\r\n              this.$message.success('保存成功')\r\n              this.load(1) // 保存成功后刷新数据\r\n              this.fromVisible = false // 关闭弹窗\r\n            } else {\r\n              this.$message.error(res.msg)\r\n            }\r\n          })\r\n        }\r\n      })\r\n    },\r\n\r\n    // 删除单条公告\r\n    del(id) {\r\n      this.$confirm('您确定删除吗？', '确认删除', {type: \"warning\"}).then(() => {\r\n        this.$request.delete(`/notice/delete/${id}`).then(res => {\r\n          if (res.code === '200') {\r\n            this.$message.success('操作成功')\r\n            this.load(1) // 删除成功后刷新数据\r\n          } else {\r\n            this.$message.error(res.msg)\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n\r\n    // 监听表格选中项变化，更新ids数组\r\n    handleSelectionChange(rows) {\r\n      this.ids = rows.map(v => v.id)\r\n    },\r\n\r\n    // 批量删除公告\r\n    delBatch() {\r\n      if (!this.ids.length) {\r\n        this.$message.warning('请选择数据')\r\n        return\r\n      }\r\n\r\n      this.$confirm('您确定批量删除这些数据吗？', '确认删除', {type: \"warning\"}).then(() => {\r\n        this.$request.delete('/notice/delete/batch', {data: this.ids}).then(res => {\r\n          if (res.code === '200') {\r\n            this.$message.success('操作成功')\r\n            this.load(1) // 批量删除成功后刷新数据\r\n          } else {\r\n            this.$message.error(res.msg)\r\n          }\r\n        })\r\n      }).catch(() => {\r\n      })\r\n    },\r\n\r\n    // 分页查询公告数据\r\n    load(pageNum) {\r\n      if (pageNum) {\r\n        this.pageNum = pageNum\r\n      }\r\n\r\n      const params = {\r\n        pageNum: this.pageNum,\r\n        pageSize: this.pageSize,\r\n        title: this.title,\r\n      }\r\n\r\n      this.$request.get('/notice/selectPage', {params}).then(res => {\r\n        this.tableData = res.data?.list\r\n        this.total = res.data?.total\r\n      })\r\n    },\r\n\r\n    // 重置查询条件并重新加载数据\r\n    reset() {\r\n      this.title = null\r\n      this.load(1)\r\n    },\r\n\r\n    // 分页器页码变化时触发的方法\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum)\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 在这里添加 scoped 样式 */\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}